{"version":3,"sources":["../src/lcs.js"],"names":["Immutable","require","makeMatrix","n","m","x","matrix","i","Array","j","lcs","xs","ys","computeLcsMatrix","backtrackLcs","DiffResult","Record","op","val","ReplaceResult","newVal","diff","printDiff","size","xSize","ySize","diffArray","is","get","push","reverse","a","Math","max","module","exports"],"mappings":"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","file":"lcs.js","sourcesContent":["'use strict';\n\nvar Immutable = require('immutable');\n\n/**\n * Returns a two-dimensional array (an array of arrays) with dimensions n by m.\n * All the elements of this new matrix are initially equal to x\n * @param n number of rows\n * @param m number of columns\n * @param x initial element for every item in matrix\n */\nvar makeMatrix = function(n, m, x){\n  var matrix = [];\n  for(var i = 0; i < n; i++) {\n    matrix[i] = new Array(m);\n\n    if(x != null){\n      for(var j = 0; j < m; j++){\n        matrix[i][j] = x;\n      }\n    }\n  }\n\n  return matrix;\n};\n\n/**\n * Computes Longest Common Subsequence between two Immutable.JS Indexed Iterables\n * Based on Dynamic Programming http://rosettacode.org/wiki/Longest_common_subsequence#Java\n * @param xs ImmutableJS Indexed Sequence 1\n * @param ys ImmutableJS Indexed Sequence 2\n */\nvar lcs = function(xs, ys){\n  var matrix = computeLcsMatrix(xs, ys);\n\n  return backtrackLcs(xs, ys, matrix);\n};\n\nvar DiffResult = Immutable.Record({op: '=', val: null});\nvar ReplaceResult = Immutable.Record({op: '!=', val: null, newVal: null});\n\n/**\n * Returns the resulting diff operations of LCS between two sequences\n * @param xs Indexed Sequence 1\n * @param ys Indexed Sequence 2\n * @returns Array of DiffResult {op:'=' | '+' | '-', val:any}\n */\nvar diff = function(xs, ys){\n  var matrix = computeLcsMatrix(xs, ys);\n\n  return printDiff(matrix, xs, ys, xs.size||0, ys.size||0);\n};\n\nvar printDiff = function(matrix, xs, ys, xSize, ySize) {\n  var diffArray = [];\n  var i = xSize - 1;\n  var j = ySize - 1;\n  while (i >= 0 || j >= 0) {\n    if (i >= 0 && j >= 0 && Immutable.is(xs.get(i), ys.get(j))) {\n      diffArray.push(new DiffResult({\n        op: '=',\n        val: xs.get(i)\n      }));\n      i -= 1;\n      j -= 1;\n    }\n    else if (i >= 0 && j >= 0 && i === j && !Immutable.is(xs.get(i), ys.get(j))) {\n      diffArray.push(new ReplaceResult({\n      val: xs.get(i),\n      newVal: ys.get(i)\n      }));\n      i -= 1;\n      j -= 1;\n    }\n    else {\n      if (j >= 0 && (i === -1 || matrix[i+1][j] >= matrix[i][j+1])) {\n        diffArray.push(new DiffResult({\n          op: '+',\n          val: ys.get(j)\n        }));\n        j -= 1;\n      }\n      else if (i >= 0 && (j === -1 || matrix[i+1][j] < matrix[i][j+1])){\n        diffArray.push(new DiffResult({\n          op: '-',\n          val: xs.get(i)\n        }));\n        i -= 1;\n      }\n    }\n  }\n  return diffArray.reverse();\n};\n\n/**\n * Computes the Longest Common Subsequence table\n * @param xs Indexed Sequence 1\n * @param ys Indexed Sequence 2\n */\nfunction computeLcsMatrix(xs, ys) {\n  var n = xs.size||0;\n  var m = ys.size||0;\n  var a = makeMatrix(n + 1, m + 1, 0);\n\n  for (var i = 0; i < n; i++) {\n    for (var j = 0; j < m; j++) {\n      if (Immutable.is(xs.get(i), ys.get(j))) {\n        a[i + 1][j + 1] = a[i][j] + 1;\n      }\n      else {\n        a[i + 1][j + 1] = Math.max(a[i + 1][j], a[i][j + 1]);\n      }\n    }\n  }\n\n  return a;\n}\n\n/**\n * Extracts a LCS from matrix M\n * @param xs Indexed Sequence 1\n * @param ys Indexed Sequence 2\n * @param matrix LCS Matrix\n * @returns {Array.<T>} Longest Common Subsequence\n */\nvar backtrackLcs = function(xs, ys, matrix){\n  var lcs = [];\n  for(var i = xs.size, j = ys.size; i !== 0 && j !== 0;){\n    if (matrix[i][j] === matrix[i-1][j]){ i--; }\n    else if (matrix[i][j] === matrix[i][j-1]){ j--; }\n    else{\n      if(Immutable.is(xs.get(i-1), ys.get(j-1))){\n        lcs.push(xs.get(i-1));\n        i--;\n        j--;\n      }\n    }\n  }\n  return lcs.reverse();\n};\n\nmodule.exports = {\n  lcs: lcs,\n  computeLcsMatrix: computeLcsMatrix,\n  diff: diff\n};\n"]}