{"version":3,"sources":["../src/slateDiff.js"],"names":["pathConv","slateDiff","pathStr","result","match","map","parseInt","v","path","slice","length","offset","slateRemoveTextOp","type","text","marks","slateRemoveNodeOp","node","slateAddTextOp","value","slateAddNodeOp","fromJSON","toJSON","value1","value2","differences","document","slateOps","d","op","get","nodes","obj","object","console","error","concat","toJS"],"mappings":"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","file":"slateDiff.js","sourcesContent":["import diff from './diff'\r\nimport { Value, Block } from 'slate'\r\n\r\n// TODO: Move to path.js\r\nexport function pathConv(pathStr) {\r\n  const result = pathStr.match(/\\d+/g).map(v => {\r\n    return parseInt(v, 10)\r\n  })\r\n  let path = result.slice(0, result.length-1)\r\n  const offset = result[result.length-1]\r\n\r\n  // Handle single node path\r\n  if (path.length === 0) { path = [ offset ] }\r\n\r\n  return { path, offset }\r\n}\r\n\r\nfunction slateRemoveTextOp(path, offset) {\r\n  return {\r\n    type: 'remove_text',\r\n    path: path,\r\n    offset: offset,\r\n    text: '*',\r\n    // TODO: How are marks handled?\r\n    marks: []\r\n  }\r\n}\r\n\r\nfunction slateRemoveNodeOp(path, node) {\r\n  return {\r\n    type: 'remove_node',\r\n    path: path,\r\n    node: node\r\n  }\r\n}\r\n\r\nfunction slateAddTextOp(path, offset, value) {\r\n  return {\r\n    type: 'insert_text',\r\n    path: path,\r\n    offset: offset,\r\n    text: value,\r\n    // TODO: Get marks from `value`\r\n    marks: []\r\n  }\r\n}\r\n\r\nfunction slateAddNodeOp(path, offset, value) {\r\n  return {\r\n    type: 'insert_node',\r\n    path: path,\r\n    node: Block.fromJSON(value.toJSON())\r\n  }\r\n}\r\n\r\nexport default function slateDiff(value1, value2) {\r\n  const differences = diff(value1.document, value2.document)\r\n\r\n  const slateOps = differences.map((d) => {\r\n    const op = d.get('op')\r\n    const { path, offset } = pathConv(d.get('path'))\r\n    if (op === 'remove') {\r\n      if (path.length === 1) {\r\n        // If path length is 1, offset = path[0]\r\n        return slateRemoveNodeOp(path, value1.document.nodes.get(offset))\r\n      }\r\n      else {\r\n        return slateRemoveTextOp(path, offset)\r\n      }\r\n    }\r\n    else if (op === 'add') {\r\n      const value = d.get('value')\r\n      // Safe to assume value has .object?\r\n      const obj = value.object\r\n      if (obj === 'character') {\r\n        return slateAddTextOp(path, offset, value.text)\r\n      }\r\n      else if (obj === 'block') {\r\n        return slateAddNodeOp(path, offset, value)\r\n      }\r\n      else {\r\n        console.error('Unhandled value.object type ', obj)\r\n        return\r\n      }\r\n    }\r\n    else if (op === 'replace') {\r\n      const value = d.get('value')\r\n      return [\r\n        slateRemoveTextOp(path, offset), slateAddTextOp(path, offset, value)\r\n      ]\r\n    }\r\n    else {\r\n      console.error('Unhandled operation ', op)\r\n      return\r\n    }\r\n  })\r\n\r\n  // Flatten for `replace`\r\n  return [].concat(...slateOps.toJS())\r\n}"]}